#ifndef RINGSIGNATURE_H
#define RINGSIGNATURE_H

#include <string>
#include <vector>
#include "FileReader.h"
#include "FileWriter.h"
#include "Winternitz-Signature.h"


struct RingSignature {
    std::string keyImage;                   // The key image: designed to negate double-spending: generated by hashing the one-time private key
    std::string signature;                  // The signature of the message - sign 'TransactionOutput data' using the private key
    std::vector<std::string> publicKeys;    // Contains one proper public key + 'n' amount of decoy keys (derived form a repository)
    
    TransactionData data;                   // Contains the transaction data
};

struct TransactionData {
    std::string receiverKey;                // The receivers temporary stealth public address
    unsigned int transactionAmount;         // The amount sent in the transaction (TEMPORARY UNTIL A QUANTUM-PROOF COMMITMENT IS IMPLEMENTABLE)
};

class TraceableRingSignature {
private:
    FileReader reader;     // Used to read the public key repository file
    FileWriter writer;     // Used to write to the public key repository file

    // The public key repository - contains known public keys from the blockchain
    std::string publicKeyRepositoryPath;
    std::vector<std::string> publicKeyRepository;
    void readPublicKeyRepository();   // Reads the transaction repository and fills the transactionRepo vector

    std::string generateSignature(TransactionData data, std::string privateKey);    // Sign the data using a Winternitz Signature

public:
    TraceableRingSignature() {};

    void writeToPublicKeyRepository(std::vector<std::string> publicKeys);   // Adds to the public key repository file

    // Generates a traceable ring signature - takes in the transaction amount, the receiver key, and the NTRUencrypt private key
    RingSignature generateRingSignature(unsigned int amount, unsigned int receiver, std::string privateKey);
};

#endif