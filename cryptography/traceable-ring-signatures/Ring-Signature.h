#ifndef RINGSIGNATURE_H
#define RINGSIGNATURE_H

#include <string>
#include <vector>
#include "Random.h"
#include "SHA256.h"
#include "FileReader.h"
#include "FileWriter.h"
#include "Winternitz-Signature.h"


struct RingSignature {
    std::string keyImage;                   // The key image: designed to negate double-spending: generated by hashing the one-time private key
    std::string signature;                  // The signature of the message - sign 'TransactionOutput data' using the private key
    std::vector<std::string> publicKeys;    // Contains one proper public key + 'n' amount of decoy keys (derived form a repository)
    
    TransactionData data;                   // Contains the transaction data
};

struct TransactionData {
    std::string receiverKey;                // The receivers temporary stealth public address
    unsigned int transactionAmount;         // The amount sent in the transaction (TEMPORARY UNTIL A QUANTUM-PROOF COMMITMENT IS IMPLEMENTABLE)
};

class TraceableRingSignature {
private:
    SHA256 sha;                         // Used to generate the key image from the one-time private key
    Random random;                      // Used to select the decoy keys - takes private key as input
    FileReader reader;                  // Used to read the public key repository file
    FileWriter writer;                  // Used to write to the public key repository file
    WinternitzSignature winternitz;     // Used to create a signature

    // The public key repository - contains known public keys from the blockchain
    std::string publicKeyRepositoryPath;
    std::vector<std::string> publicKeyRepository;
    void readPublicKeyRepository();   // Reads the transaction repository and fills the transactionRepo vector

    std::string generateSignature(TransactionData data, std::string privateKey);    // Sign the data using a Winternitz Signature

public:
    TraceableRingSignature() {};

    void writeToPublicKeyRepository(std::vector<std::string> publicKeys);   // Adds to the public key repository file

    // One-time Key Generation
    std::string generateOneTimePrivateKey(size_t seed);
    std::string generateOneTimePublicKey(std::string privateKey);

    // Generates a traceable ring signature - takes in the transaction amount, the receiver key, the private key, and the number of decoy addresses (4 - 6)
    RingSignature generateRingSignature(unsigned int amount, std::string receiver, std::string privateKey, unsigned short decoys);
};

#endif